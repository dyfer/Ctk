TITLE:: CtkScore
summary:: A system for rendering Scores with the CTK objects
categories:: Libraries>CTK
related:: Overviews/CTK, Classes/CtkScore, Classes/CtkSynthDef, Classes/CtkProtoNotes, Classes/CtkNote, Classes/CtkBuffer, Classes/CtkControl, Classes/CtkAudio, Classes/CtkEvent

DESCRIPTION::
Part of the Composer's Tool Kit (CTK) system. See link::Overviews/Ctk:: for more details.

CtkScore enables rendering Scores with Ctk objects. Examples below show how to populate an instance of CtkScore. The CtkScore can then be rendered in NRT, played or saved as a file.


CLASSMETHODS::

METHOD:: new
Crete new instance of a CtkScore. Any number of initial events may be passed in at creation time.

ARGUMENT::  ... events
events are instances of link::Classes/CtkNote::, link::Classes/CtkGroup::, link::Classes/CtkBuffer::, link::Classes/CtkEvent::, link::Classes/CtkControl:: or even another CtkScore


INSTANCEMETHODS::

METHOD:: write
renders the CtkScore in non-real-time (NRT) mode

ARGUMENT:: path
audio file path to render the score to

ARGUMENT:: duration
when nil, the entire CtkScore will be rendered

ARGUMENT:: sampleRate

ARGUMENT:: headerFormat
See link::Classes/SoundFile#-headerFormat::

ARGUMENT:: sampleFormat
See link::Classes/SoundFile#-sampleFormat::

ARGUMENT:: options
can be an instance of ServerOptions (e.g. useful for specifying number of channels in the output file: code::ServerOptions.new.numOutputBusChannels_(2)::)

ARGUMENT:: action
A function to be evaluated once the NRT server has finished rendering its score.

ARGUMENT:: inputFilePath
an optional path for an input soundfile.

ARGUMENT:: oscFilePath
an optional path to which the binary OSC file will be written.

METHOD:: play
plays this instance of CtkScore in real-time (RT) on the server.
NOTE::When CtkScore.play is called, the CtkScore is rendered fully before performance starts (and may cause a delay). Events that are instances of CtkBuffer are also allocated to the Server before performance starts to ensure they are ready for use. This, too, may cause a slight delay.::

ARGUMENT:: server
play on the server specified, defaults to Server.default

ARGUMENT:: clock
an optional clock to be used as a tempo base, defaults to TempoClock.default if nil.

ARGUMENT:: quant
quantize start time to quant

ARGUMENT:: startPoint

ARGUMENT:: endPoint

METHOD:: score

returns::  the Score that is created as part of CtkScore.

METHOD:: copy
make a copy of this score

returns:: a copy of this score

METHOD:: offset
set an offset for this score, useful whem mergin multiple scores

ARGUMENT:: duration
offset in seconds

METHOD:: add
Add events to the score. Any number of events may be added.

ARGUMENT::  ... events
instances of CtkNote, CtkGroup, CtkBuffer, CtkEvent, CtkControl or another CtkScore.


METHOD:: saveToFile
saves the Score associated with this instance of CtkScore

ARGUMENT:: path
'path' to save to


EXAMPLES::
code::
(
var scpn, score, grainfun, gliss;
scpn = CtkProtoNotes(
	SynthDef(\control, {arg outbus, rate, low, hi;
		Out.kr(outbus, LFNoise2.kr(rate).range(low, hi))
	}),
	SynthDef(\test, {arg freq, amp, dur;
		var env, envgen, src;
		env = Env([0, 1, 0], [0.5, 0.5], \sin);
		envgen = EnvGen.kr(env, timeScale: dur);
		src = BPF.ar(WhiteNoise.ar(amp), freq, 0.01, amp * envgen);
		Out.ar(0, Pan2.ar(src, Rand(-1.0, 1.0)));
	})
);

score = CtkScore.new;

//creates a granular gesture of duration. Each grain is 0.1 seconds long, new grain every 0.02 seconds
grainfun = {arg starttime, duration, ampenv, lowfreq, hifreq;
	var now, note, thisgroup;
	now = 0;
	ampenv.times = ampenv.times.normalizeSum * duration; // scale the Env's time to the gestures
	thisgroup = CtkGroup.new(starttime, duration + 2).addTo(score);
	while({
		// create a note... add it to the CtkScore
		note = scpn[\test].note(starttime + now, 0.1, target: thisgroup)
		.freq_(lowfreq.rrand(hifreq))
		.amp_(ampenv[now])
		.dur_(0.1).addTo(score);
		now = now + 0.02;
		now < duration;
	});
};

gliss = {arg starttime, duration, rate, lowfreq, hifreq;
	var cbus, control, note;
	cbus = CtkControl.new;
	control = scpn[\control].note(starttime, duration)
	.outbus_(cbus.bus)
	.rate_(rate)
	.low_(lowfreq)
	.hi_(hifreq)
	.addTo(score);
	note = scpn[\test].note(starttime, duration, \tail, 1)
	.freq_(cbus)
	.amp_(2)
	.dur_(duration)
	.addTo(score);
};

grainfun.value(1, 10, Env([0, 1, 0], [0.5, 0.5], [3, -5]), 440, 880);
grainfun.value(4, 4, Env([0, 1, 0], [0.5, 0.5], [3, -5]), 4400, 8800);
grainfun.value(6, 12, Env([0, 1, 0], [0.5, 0.5], [3, -5]), 300, 400);
grainfun.value(3, 10, Env([0, 1, 0], [0.5, 0.5], [3, -5]), 200, 200);
grainfun.value(1.5, 20, Env([0, 1, 0], [0.5, 0.5], [3, -5]), 7000, 7100);

5.do({arg i;
	var j;
	j = i + 1;
	gliss.value(3 + (i + 4), 10.rrand(7), j.reciprocal, 440 * j, 880 * j);
});

// uncomment to play the CtkScore you have created
score.play(s);

// uncomment to write (render) the score to a soundfile
// score.write("~/Desktop/test.aiff".standardizePath, 22, options: ServerOptions.new.numOutputBusChannels_(2).blockSize_(1));

// uncomment to save the CtkScore as a file
// score.saveToFile("~/Desktop/test.sc".standardizePath);
)



// working with a 'parent' score - manipulating CtkScore objects
(
s.boot;
o = ServerOptions.new.numOutputBusChannels_(1);

// the 'parent' score
a = CtkScore.new;

b = CtkScore.new;

z = CtkSynthDef(\test, {arg freq, dur;
	Out.ar(0, SinOsc.ar(freq, 0, XLine.kr(0.1, 0.0001, dur)))
});

t = 0.0;

while({
	b.add(z.note(t, 0.1).freq_(440).dur_(0.1));
	t = t + 0.1;
	t < 5.0;
});

a.add(b);
a.saveToFile("~/Desktop/test.sc".standardizePath)
a.write("~/Desktop/test.aiff".standardizePath, options: o);
)

// p = Player.new("~/Desktop/test.aiff".standardizePath).gui; //seems not working currently
p = Buffer.read(s, "~/Desktop/test.aiff".standardizePath);
q = p.play; //play the rendered score
q.free; p.free; //free the buffer

(
var scpn, score, grainfun, gliss;
scpn = CtkProtoNotes(
	SynthDef(\control, {arg outbus, rate, low, hi;
		Out.kr(outbus, LFNoise2.kr(rate).range(low, hi))
		}),
	SynthDef(\test, {arg freq, amp, dur;
		var env, envgen, src;
		env = Env([0, 1, 0], [0.5, 0.5], \sin);
		envgen = EnvGen.kr(env, timeScale: dur);
		src = BPF.ar(WhiteNoise.ar(amp), freq, 0.01, amp * envgen);
		Out.ar(0, Pan2.ar(src, Rand(-1.0, 1.0)));
		})
	);

score = CtkScore.new;


//creates a granular gesture of duration. Each grain is 0.1 seconds long, new grain every 0.02 seconds
grainfun = {arg starttime, duration, ampenv, lowfreq, hifreq;
	var now, note, thisgroup;
	now = 0;
	ampenv.times = ampenv.times.normalizeSum * duration; // scale the Env's time to the gestures
	thisgroup = CtkGroup.new(starttime, duration + 2).addTo(score);
	while({
		// create a note... add it to the CtkScore
		note = scpn[\test].note(starttime + now, 0.1, target: thisgroup)
			.freq_(lowfreq.rrand(hifreq))
			.amp_(ampenv[now])
			.dur_(0.1).addTo(score);
		now = now + 0.02;
		now < duration;
		});
	};

gliss = {arg starttime, duration, rate, lowfreq, hifreq;
	var cbus, control, note;
	cbus = CtkControl.new;
	control = scpn[\control].note(starttime, duration)
		.outbus_(cbus.bus)
		.rate_(rate)
		.low_(lowfreq)
		.hi_(hifreq)
		.addTo(score);
	note = scpn[\test].note(starttime, duration, \tail, 1)
		.freq_(cbus)
		.amp_(2)
		.dur_(duration)
		.addTo(score);
	};

grainfun.value(1, 10, Env([0, 1, 0], [0.5, 0.5], [3, -5]), 440, 880);
grainfun.value(4, 4, Env([0, 1, 0], [0.5, 0.5], [3, -5]), 4400, 8800);
grainfun.value(6, 12, Env([0, 1, 0], [0.5, 0.5], [3, -5]), 300, 400);
grainfun.value(3, 10, Env([0, 1, 0], [0.5, 0.5], [3, -5]), 200, 200);
grainfun.value(1.5, 20, Env([0, 1, 0], [0.5, 0.5], [3, -5]), 7000, 7100);

5.do({arg i;
	var j;
	j = i + 1;
	gliss.value(3 + (i + 4), 10.rrand(7), j.reciprocal, 440 * j, 880 * j);
	});

// uncomment to play the CtkScore you have created
score.play(s);

// uncomment to write the score to a soundfile
// score.write("~/Desktop/test.aiff".standardizePath, 22, options: ServerOptions.new.numOutputBusChannels_(2).blockSize_(1));

// uncomment to save the CtkScore as a file
// score.saveToFile("~/Desktop/test.sc".standardizePath);
)



// working with a 'parent' score - manipulating CtkScore objects

(
s.boot;
o = ServerOptions.new.numOutputBusChannels_(1);

// the 'parent' score
a = CtkScore.new;

b = CtkScore.new;

z = CtkSynthDef(\test, {arg freq, dur;
	Out.ar(0, SinOsc.ar(freq, 0, XLine.kr(0.1, 0.0001, dur)))
});

t = 0.0;

while({
	b.add(z.note(t, 0.1).freq_(440).dur_(0.1));
	t = t + 0.1;
	t < 5.0;
});

a.add(b);
a.saveToFile("~/Desktop/test.sc".standardizePath);
a.write("~/Desktop/test.aiff".standardizePath, options: o);

)
// p = Player.new("~/Desktop/test.aiff".standardizePath).gui;
p = Buffer.read(s, "~/Desktop/test.aiff".standardizePath);
q = p.play; //play the rendered score
q.free; p.free; //free the buffer

(
// make a copy of b with an offset of 2.05 seconds
c = b.copy;
c.offset(2.05);
// alter the freq , durations and the dur parameter of c's notes
c.notes.do({arg me;
	me.setDuration(0.11).dur_(0.11).freq_(me.freq * 2)
});

// add it to the score
a.add(c);

a.write("~/Desktop/test.aiff".standardizePath, options: o);
)

// p = Player.new("~/Desktop/test.aiff".standardizePath).gui;
p = Buffer.read(s, "~/Desktop/test.aiff".standardizePath);
q = p.play; //play the rendered score
q.free; p.free; //free the buffer


(
// let's alter the score 'c'...
c.notes.do({arg me;
	me.freq_(me.freq * (1 + 0.25.rand2));
});

// offset it another 0.123 seconds
c = c.offset(0.123);

a.write("~/Desktop/test.aiff".standardizePath, options: o);
)

// p = Player.new("~/Desktop/test.aiff".standardizePath).gui;
p = Buffer.read(s, "~/Desktop/test.aiff".standardizePath);
q = p.play; //play the rendered score
q.free; p.free; //free the buffer

(
// make a copy of b with an offset of 2.05 seconds
c = b.copy;
c.offset(2.05);
// alter the freq , durations and the dur parameter of c's notes
c.notes.do({arg me;
	me.setDuration(0.11).dur_(0.11).freq_(me.freq * 2)
});

// add it to the score
a.add(c);

a.write("~/Desktop/test.aiff".standardizePath, options: o);
)

// p = Player.new("~/Desktop/test.aiff".standardizePath).gui;
p = Buffer.read(s, "~/Desktop/test.aiff".standardizePath);
q = p.play; //play the rendered score
q.free; p.free; //free the buffer

// let's alter the score 'c'...
(
c.notes.do({arg me;
	me.freq_(me.freq * (1 + 0.25.rand2));
});

// offset it another 0.123 seconds
c = c.offset(0.123);

a.write("~/Desktop/test.aiff".standardizePath, options: o);
)

// p = Player.new("~/Desktop/test.aiff".standardizePath).gui;
p = Buffer.read(s, "~/Desktop/test.aiff".standardizePath);
q = p.play; //play the rendered score
q.free; p.free; //free the buffer
::
